{
  "name": "EEG-Blinks",
  "tagline": "BLINKER: Automated blink detector for EEG",
  "body": "# Introduction to BLINKER\r\nBLINKER and associated tools are an automated pipeline for detecting eye blinks in EEG and calculating various properties of these blinks. BLINKER takes as input an arbitrary number of signals, which can include ordinary EEG channels, EOG channels and independent components (IC), determines which signals have acceptable blinks and determining the optimal signal for determining blinks. BLINKER also has facilities for merging blinks calculating from different source signals and for plotting individual blinks to facilitate manual evaluation and synchronization of EEG with video and eye tracking. BLINKER is designed to be run in a completely automated way. \r\n\r\nThe major sections of this document are:\r\n* <a name=\"Introduction\">Introduction</a> \r\n    * [Requirements](#Requirements)  \r\n    * [Citation](#Citing)   \r\n    * [Installation](#Installing)\r\n* [Running BLINKER as an EEGLAB plugin](#Plugin)\r\n* [Running as a script](#Script)\r\n    * [Parameters describing data set metadata.](#Metadata)  \r\n    * [Parameters describing what to save or display.](#Save)\r\n* The BLINKER algorithm\r\n    * [Extract potential blinks of each candidate signal.](#Extraction)\r\n    * [Calculate landmarks of potential blinks.](#Landmarks)\r\n    * [Reject signals with low signal-to-noise (SNR) ratios.](#SNR)\r\n    * [Select the \"best\" candidate signal as the \"used\" signal.](#Used)\r\n    * [Calculate blink maximum amplitude distributions to eliminate eye movements.](#Maxima)\r\n    * [Calculate the blink properties and blink shapes for the \"used\" signal.](#Shapes)\r\n    * [Calculate the ocular indices for the \"used\" signal.](#Stats)\r\n* Description of BLINKER structures\r\n    * [The blinks structure](#blinks)  \r\n    * [The blinkFits structure](#blinkFits)\r\n    * [The blinkProperties structure](#blinkProperties)\r\n    * [The blinkStatistics structure](#blinkStatistics)\r\n\r\n\r\n### <a name=\"Requirements\">Requirements</a>\r\nThe BLINKER pipeline relies on the MATLAB Signal Processing toolbox, the MATLAB Statistics toolbox and EEGLAB, a freely-available MATLAB toolbox for processing EEG. EEGLAB is available from  [http://scn.ucsd.edu/eeglab](http://scn.ucsd.edu/eeglab). Various high-level BLINKER wrapper functions assume that the EEG data is provided as an EEGLAB EEG structure and that channel locations are provided in the EEG.chanlocs structure. However, low-level processing functions work directly\r\non signals.\r\n\r\n### <a name=\"Citing\">Citing BLINKER</a>\r\nBLINKER is freely available under the GNU General Public License. \r\nPlease cite the following publication if using:  \r\n> Kleifges K, Bigdely-Shamlo N, Kerick S, and Robbins KA  \r\n> BLINKER: Large-scale automated analysis of ocular indices extracted from EEG  \r\n>  \r\n\r\n### <a name=\"Installation\">Installation</a>\r\nThe BLINKER pipeline can be run in two ways --- as a standalone toolbox or as an EEGLAB plugin. To run in standalone mode, simply download the BLINKER code, found in the EEG-Blinks github repository, and add the `blinker` directory and all of its subdirectories to the MATLAB path. Regardless of how you run BLINKER, EEGLAB will need to be in your path.\r\n\r\n## <a name=\"Plugin\">BLINKER as an EEGLAB plugin</a>\r\nYou can install BLINKER as an EEGLAB plugin by unzipping the `blinker1.0.0` directory into the plugins directory of your EEGLAB installation. When you start EEGLAB, BLINKER will be available.\r\n\r\n## Running the BLINKER pipeline from EEGLAB\r\nLoad an EEG dataset to be processed using the `Load dataset` submenu under the `File` menu of EEGLAB. The BLINKER pipeline \r\ncan be found under the EEGLAB Tools submenu:  \r\n![EEGLAB menu](./images/EEGLAB_Menu.png)  \r\n\r\nAfter selecting the \"Run Blinker\" option, you will see a menu that allows you to set dataset metadata and options for saving BLINKER output. BLINKER is designed to be run without manual setting of internal algorithm parameters. However, these are all available for setting if you wish to run BLINKER from a script as described in the next section.\r\n\r\n![BLINKER menu](./images/BLINKER_Plugin.png) \r\n\r\n## <a name=\"Script\">Running BLINKER as a script in batch processing mode</a>\r\nWhile it is possible to run BLINKER as a plugin from EEGLAB, BLINKER is meant to be run in batch processing mode to analyze large collections of EEG. While it is possible to run BLINKER using the low-level functions, the easiest way to run BLINKER is to put your EEG dataset into an EEGLAB EEG structure.\r\n\r\n**Example**  \r\nRun BLINKER outside of EEGLAB but bring up a GUI to set parameters:\r\n\r\n> `[EEG, com, blinks, blinkFits, blinkProperties, blinkStatistics, params] = pop_blinker(EEG);`  \r\n\r\n**Example**  \r\nRun BLINKER without manual intervention, using all of the default parameters:\r\n\r\n> `[EEG, com, blinks, blinkFits, blinkProperties, blinkStatistics,  params] = pop_blinker(EEG, struct());  \r\n\r\n**Example**  \r\nThe previous example uses all of the default values, including defaults for metadata such as the `subjectID`. Usually you will want to override the defaults. When you are going to override defaults it is good to start with a complete `params` structure with all of the default values filled in:  \r\n\r\n> `params = checkBlinkerDefaults(struct(), getBlinkerDefaults(EEG));` \r\n\r\n\r\n**Example**  \r\nThe following example starts with a default `params` structure and then overrides some of the values related to controlling the output and to data set metadata:  \r\n\r\n> `params = checkBlinkerDefaults(struct(), getBlinkerDefaults(EEG));`  \r\n> `params.subjectID = 'S007';`  \r\n> `params.experiment = 'ARL_BCIT';`  \r\n> `params.uniqueName = 'S007_M053_Rep03';`  \r\n> `params.task = 'RSVP';`  \r\n> `params.fileName = 'D:\\ARL_BCIT\\S007_M053_Rep03.set';`  \r\n> `params.startDate = '15-Feb-2009';`  \r\n> `params.startTime = '15:26:31';`  \r\n> `params.blinkerSaveFile = 'D:\\ARL_BCIT_BLINKS\\AllUnrefBlinkSummary.mat';`  \r\n> `params.dumpBlinkerStructures = true;`  \r\n> `params.dumpBlinkImages = false;`  \r\n> `params.dumpBlinkPositions = false;`  \r\n> `params.keepSignals = false;`  \r\n> `params.showMaxDistribution = false;`  \r\n> `params.verbose = false;`  \r\n> `params.excludeLabels = {'a1', 'a2', 'vehicle position'}; \r\n> `[EEG, com, blinks, blinkFits, blinkProperties, blinkStatistics, params] = pop_blinker(EEG, params); \r\n\r\n\r\n### <a name=\"Metadata\">Parameters describing data set metadata</a>\r\nThe following parameters should be set individually for each data set so that the BLINKER output structures contain the information needed for downstream analysis.\r\n\r\n**`excludeLabels`**  \r\nThe names of signals to exclude from consideration.  \r\n[Row cell array of channel labels (default: {'exg5', 'exg6', 'exg7', 'exg8', 'vehicle position'}).]\r\n\r\n**`experiment`**  \r\nString identifying the experiment.  \r\n[String (default is `'Experiment1'`).]\r\n\r\n**`signalLabels`**  \r\nThe names of channels to try as potential signals if `signalTypeIndicator` is `'UseLabels'`.   \r\n[Row cell array of channel labels (default: {'fp1', 'f1', 'fp2', 'fz', 'fpz', 'f3', 'f4', 'f2'}).]\r\n\r\n**`signalNumbers`**  \r\nThe numbers of the channel numbers to try as potential signals if signalTypeIndicator is 'UseNumbers'.  \r\n[Row vector of positive integers less than the number of channels (default 1:number of channels)]\r\n\r\n**`signalTypeIndicator`**  \r\nString specifying the type of signals from which to extract blinks. The possibilities are to use a specific set of channel numbers, a specific set of channels identified by their labels, or a specific set of independent components identified by their position in the mixing matrix.  \r\n[String with possible values `'UseNumbers'` or `'UseLabels'` or `'UseICs'` (default is `'UseNumbers'`).]\r\n\r\n**`srate`**  \r\nA positive scalar giving the sampling rate of the signal in Hz. If an EEG structure is passed to `getBlinkerDefaults`, the default value is `EEG.srate`. Otherwise, the default 1.  \r\n[Positive scalar (default is `EEG.srate` or 1 if EEG structure is not available).]\r\n\r\n**`startDate`**  \r\nString giving the start date of data set in dd-mmm-yyyy format.  \r\n[String (default is `'01-Jan-2016'`).]\r\n\r\n**`startTime`**  \r\nString giving the start time in 24 hour hh:mm:ss format.    \r\n[String (default is `'00:00:00'`).]\r\n\r\n**`subjectID`**  \r\nString identifying the subject for the data set. BLINKER uses this ID to combine short data sets from same session to get blink maxima distribution.   \r\n[String (default is `'Subject1_Task1_Experiment1_Rep1'`).]\r\n\r\n**`task`**  \r\nName of task performed in this data set.  \r\n[String (default is 'Task1')]  \r\n  \r\n**`uniqueName`**  \r\nString uniquely identifying this data set.    \r\n[String (default is `'Unknown'`).]  \r\n\r\n### <a name=\"Save\">Parameters describing what to save or display</a>\r\nThe following parameters are usually set.\r\n\r\n**`blinkerDumpDir`**  \r\nThe path of the directory in which to dump pictures of blinks. Usually this will be empty to start with.  \r\n[char (default: [pwd filesep 'blinkDump'].)\r\n\r\n**`blinkerSaveFile`**  \r\nThe full path name of the file to save the BLINKER structures and parameters in.  \r\n[char (default: [pwd theNameOfDataset '_blinks.mat']).]\r\n\r\n**`dumpBlinkImages`**  \r\nLogical flag indicating whether to dump pictures of the individual blinks in a directory, indexed by an HTML file.  \r\n[Logical (default:true).]\r\n\r\n**`dumpBlinkPositions`**   \r\nA logical flag indicating whether to dump a text file of the frame left zeros, and frames of blink maxima frames and times.  \r\n[Logical (default:false).]\r\n\r\n**`dumpBlinkerStructures`**  \r\nLogical flag indicating whether to save all of the blinker structures in a file.  \r\n[Logical (default: true)]\r\n\r\n**`fileName`**  \r\nThe full path name of the input EEG file.  \r\n[char]\r\n\r\n**`numberMaxBins`**\r\nNumber of bins used to display histograms of blink maxima\r\n[Scalar numeric positive (default: 80)]  \r\n\r\n**`showMaxDistribution`**  \r\nLogical flag indicating whether to show a figure with a histogram of blink maxima.  \r\n[Logical (default: true)]\r\n\r\n**`verbose`**  \r\nA flag indicating whether to output status messages during execution and a summary of results at the end.  \r\n[logical (default: true).] \r\n\r\n# BLINKER Algorithm Overview\r\nThis section discusses the algorithm and the setting of the various parameters.\r\n\r\n### Processing steps\r\n1. [Extract potential blinks of each candidate signal.](#Extraction)\r\n1. [Calculate landmarks of potential blinks.](#Landmarks)\r\n1. [Reject signals with low signal-to-noise (SNR) ratios.](#SNR)\r\n1. [Select the \"best\" candidate signal as the \"used\" signal.](#Used)\r\n1. [Calculate blink maximum amplitude distributions to eliminate eye movements.](#Maxima)\r\n1. [Calculate the blink properties and blink shapes for the \"used\" signal.](#Shapes)\r\n1. [Calculate the ocular indices for the \"used\" signal.](#Stats)\r\n\r\n## <a name=\"Extraction\">Extract potential blinks of each candidate signal</a>\r\nEach candidate signal is band-passed filtered in the interval [1, 20] Hz prior to blink detection. BLINKER then determines the intervals during which the signal is greater than 1.5 standard deviations above the overall signal mean. These intervals form the potential blinks. We consider only potential blinks that are longer than 50 ms and are at least 50 ms apart. These criteria eliminate many small rapid eye movements without appearing to eliminate actual blinks.\r\n\r\nParameters related to this stage:  \r\n\r\n**`lowCutoffHz`**  \r\nThe lower edge of the band pass filter applied to each candidate signal prior to detecting potential blinks. \r\n[Nonnegative scalar (default 1).]\r\n\r\n**`highCutoffHz`**  \r\nThe upper edge of the band pass filter applied to each candidate signal prior to detecting potential blinks. \r\n[Nonnegative scalar (default 20).]\r\n\r\n**`srate`**  \r\nA positive scalar giving the sampling rate of the signal in Hz. If an EEG structure is passed to `getBlinkerDefaults`, the default value is `EEG.srate`. Otherwise, the default 1.  \r\n[Positive scalar (default is `EEG.srate` or 1 if EEG structure is not available).]\r\n\r\n**`stdThreshold`**    \r\nNumber of robust standard deviations above the mean the signal for potential blinks.  \r\n[Scalar numeric positive (default is 1.5).]\r\n\r\n## <a name=\"Landmarks\">Calculate landmarks of potential blinks.</a> \r\n\r\nHaving identified the potential blinks, BLINKER then applies a fitting process to find specified landmarks for each blink and saves information about the landmarks of candidate blink in a structure in the `blinkFits` structure described more completely in a [later section](#blinkFits). The following figure summarizes some important blink landmarks:\r\n\r\n![Blink landmarks](./images/ExampleBlinkLandmarks.png) \r\n\r\nThe `maxValue` the maximum value in the interval for this blink occurs at frame 100786 (the `maxFrame`), which is 393.695 seconds from the beginning of the data set. If two or more points in the interval achieve the maximum value, the `maxFrame` is the first. Other blink landmarks are computed as follows. \r\n\r\nThe `leftZero` is the last zero crossing before `maxFrame`. If the signal does not cross zero between this blink and the previous blink, `leftZero` is the frame of the lowest amplitude between the blinks. The `rightZero` is the zero crossing after `maxFrame`. If the signal does not cross zero between this blink and the next blink, `rightZero` is the frame of the lowest amplitude between the blinks. The `upStroke` is the interval between `leftZero` and `maxFrame`, and the `downStroke is the interval between `maxFrame` and `rightZero`.  \r\n\r\nThe `leftBase` (frame 100755 at time 393.57 seconds in the example) is the first local minimum to the left of the maximum velocity frame in the `upStroke`. Similarly, the `rightBase` is the first local minimum to the right of the maximum velocity frame in the `downStroke`. BLINKER marks the leftBase and rightBase with green crosses when plotting blinks. \r\n\r\nBLINKER computes for each potential blink in a candidate signal the best linear fits for the inner 80% of the up-stroke and down-stroke, respectively. The quality (R<sup>2</sup>) of the correlation of these lines (denoted by `leftR2` and `rightR2`, respectively) with the actual blink trajectory is a measure of the closeness of the potential blink to a stereotypical blink. \r\n\r\nBLINKER computes the intersection of these fit two lines (the `yIntersect` at frame `xIntersect`) and displays the perpendicular line using a thin black line. This tent peak point is slightly forward of and above the maximum of the actual blink trajectory (the blink peak) in a stereotypical blink. The values left and right R<sup>2</sup>, as well as the relative position of the tent peak to the blink peak, provide simple tests of the how closely the blink resembles a stereotypical blink. \r\n\r\n## <a name=\"SNR\">Reject signals with low signal-to-noise (SNR) ratios.</a>\r\nAfter determining the landmarks for all of the potential blinks in a candidate signal, BLINKER computes the blink-amplitude ratio (BAR) for the signal. The blink-amplitude ratio is the average amplitude of the signal between the blink left-zero and right-zero zero crossings divided by the average amplitude of the positive portion of the signal “outside” the blink. (The blink excursion is always in the positive direction.) The left outer portion consists of the interval from the right-zero of the previous blink (or the beginning of the signal for the first blink) to the left-zero of this blink. The right outer portion consists of the interval from the right-zero of this blink to the left-zero of the next blink (or the end of the signal for the last blink). BLINKER rejects signals that have a BAR outside a specified range ([3, 50] by default). We have found empirically that signals with BAR values in the range [5, 20] usually capture blinks reasonably well. BAR is a measure of the signal-to-noise ratio (SNR) of the blink to the background in a candidate signal.\r\n\r\n**Parameters:**  \r\n\r\n**`blinkAmpRange`**  \r\nThe range of blink amplitude ratios allowed for candidate signals.   \r\n[Two-element row vector of positive values (default: [3, 50]).] \r\n\r\n## <a name=\"Used\">Select the \"best\" candidate signal as the \"used\" signal.</a>\r\n\r\nThe next step is to select the best candidate signal to be used for downstream calculations. The best signal is the one with `goodRatio` above `goodRatioThreshold` that has the maximum number of \"good\" blinks. A good blink for these purposes has both left and right correlations above `correlationThresholdBottom`. If no signals have a `goodRatio` above the threshold, then BLINKER picks the signal with highest number of good blinks and marks the signal as marginal by making the \"used\" value negative.  \r\n\r\nThe `goodRatio` is first determined by \r\n**`correlationThresholdBottom`**  \r\nMinimum correlation of blink with linear fits in order to be considered a \"good\" blink.  \r\n[Non negative scalar between 0 and 1 (Default: 0.90).]\r\n\r\n**`correlationThresholdTop`**  \r\nMinimum correlation of blink with linear fits in order to be considered a \"best\" blink.    \r\n[Non negative scalar between 0 and 1 (Default: 0.98).]\r\n\r\n\r\n**`goodRatioThreshold`**  \r\nThe minimum value of `goodRatio` needed for a signal to be considered non-marginal.\r\n[Non negative scalar (default: 0.7).]\r\n\r\n**`keepSignals`**\r\nFlag indicating that BLINKER should retain all candidate signals that pass the blink amplitude ratio test regardless of their good ratios. This setting is useful when multiple datasets for the same session are to be combined downstream to determine the \"best\" signal.  \r\n[Logical (default: false).] \r\n\r\n**`minGoodBlinks`**  \r\nThe minimum number of good blinks a signal must have to be considered a candidate signal.  \r\n[Non negative scalar (default: 10).]\r\n\r\n\r\n## <a name=\"Maxima\">Calculate blink maximum amplitude distributions and eliminate out of range signals</a>\r\n\r\nThe distribution of blink maximum amplitudes is typically bell-shaped, as show in the figure below.  \r\n![Example Show Max Distribution](./images/Mission021S2007X2.png) \r\n\r\nThe green line shows the distribution of maximum amplitudes of all potential blinks, and the thick light gray line shows the distribution of maximum amplitudes of the “good” blinks (`upStroke` and `downStroke` R<sup>2</sup> > 0.90). The medium thick gray line shows the distribution of maximum amplitudes of the “better” blinks (`upStroke` and `downStroke` R<sup>2</sup> > 0.95), and the black line shows the distribution of maximum amplitudes of the “best” blinks (up-stroke and down-stroke R<sup>2</sup> > 0.98). The magenta line shows the blinks selected by BLINKER.  These “used” blinks have up-stroke and down-stroke R<sup>2</sup> > 0.90 and satisfy the maximum amplitude distribution criterion and the pAVR criterion.  These later criteria allow BLINKER to separate normal blinks from eye movements. \r\n\r\nThe maximum amplitude distribution criterion enforces the bell-shaped maximum distribution that normal blinks have around the median of the “best” blinks. This criteria eliminates blinks whose R<sup>2</sup> is low and whose amplitudes are far from the best blink median. By default, BLINKER eliminates “best blinks” more than five robust standard deviations from the median and “good” blinks more than two robust standard deviations away from this median. Here we define the robust standard deviation as 1.4826 times the median absolute deviation from the median. Fig. 3 displays the median of the “best” blinks with a gray vertical line and the locations that are two robust standard deviations from this median with dashed gray lines. \r\n\r\nThe pAVR criterion captures the difference the sharp rising edge of saccades and the more curved rise of normal blinks. We have found empirically that blink candidates with pAVR < 3 do not correspond to normal blinks, but rather saccades and certain short, fast eye movements.  \r\n\r\n**Parameters:** \r\n\r\n**`pAVRThreshold`**  \r\nThe minimum value of pAVR needed to be a blink rather than an eye movement.  \r\n[Positive scalar (default: 3).]\r\n \r\n**`correlationThresholdTop`**  \r\nMinimum correlation of blink with linear fits in order to be considered a \"best\" blink.    \r\n[Non negative scalar between 0 and 1 (Default: 0.98).]\r\n\r\n**`correlationThresholdBottom`**  \r\nMinimum correlation of blink with linear fits in order to be considered a \"good\" blink.  \r\n[Non negative scalar between 0 and 1 (Default: 0.90).]\r\n\r\n**`correlationThresholdMiddle`**   \r\nMinimum correlation of blink with linear fits in order to be considered a \"better\" blink.  \r\n[Non negative scalar between 0 and 1 (Default: 0.95).]\r\n\r\n**`zThresholds`**  \r\nCorrelation and max z-score amplitude threshold pairs used for determining good blinks.  \r\n[Non negative vector with 2 columns and at least two rows. (Default: [0.90, 2; 0.98, 5].)]\r\n\r\n\r\n\r\n\r\n## <a name=\"Shapes\">Calculate the blink properties and blink shapes for the \"used\" signal.</a>\r\n\r\n## <a name=\"Stats\">Calculate the ocular indices for the \"used\" signal.</a>\r\n\r\n**`shutAmpFraction`**\r\nFraction of the maximum blink amplitude to reach above zero to consider the eye shut.  \r\n[Scalar value in [0, 1] (default: 0.90).]\r\n\r\n**`ICSimilarityThreshold`**\r\nSimilarity threshold used by eyeCatch to designate an IC as a candidate blink IC.  \r\n[Scalar value in [0, 1] (default: 0.85).]\r\n\r\n**`ICFOMThreshold`**\r\nMean difference in IC scalp map amplitude of front versus rear hemispheres (used to select blink ICs)\r\n[Scalar numeric positive (default: 1).]\r\n\r\n#BLINKER structures\r\nBLINKER stores blink information in four major structures: [blinks](#blinks), [blinkFits](#blinkFits), [blinkProperties](#blinkProperties), and [blinkStatistics](#blinkStatistics). This section describes these structures in more detail.\r\n\r\n## <a name=\"blinks\">The blinks structure</a>\r\nThe `blinks` structure holds basic information about the dataset, the candidate signals and the positions of\r\nthe potential blinks in the candidate signals. \r\n**`experiment`**  \r\n String identifying the experiment or data collection that this dataset is part of.\r\n\r\n**`fileName`**  \r\n String with the full path name of the file from which the blinks were computed.\r\n\r\n**`signalData`**  \r\n Structure with details of the candidate signals and potential blink positions.\r\n\r\n**`srate`**  \r\n Sampling rate in Hz of the signal.\r\n\r\n**`startTime`**  \r\n Double value giving the days (to within) from January 0, 0000.\r\n\r\n**`status`**  \r\n String indicated the status of the blink calculation. A value of \"success\" means that blinks were successfully computed, although the results may be marginal. A value of \"failed\" means that the algorithm could not extract blinks from any of the candidate signals provide.\r\n\r\n**`subjectID`**  \r\n String identifying the subject from which the dataset was recorded. This field is used for display purposes and for combining datasets taken from a single subject in one session to improve estimates of blink maximum distribution.\r\n\r\n**`task`**  \r\n String identifying the task performed by the subject for this dataset.\r\n\r\n**`uniqueName`**  \r\n String uniquely identifying this dataset within the context of the analysis. Usually this will be a combination of the experiment, subject, task, replicate, and other identifying information. This string is used for display purposes and for lookup of datasets within a combined analysis.\r\n\r\n**`usedSignal`**  \r\n Integer identifying the signal that is selected as the \"best\" signal for blinks. Usually this will be a channel number within the original dataset or the number of an IC within an independent component decomposition associated with the dataset. A negative value indicates that the results of the calculation were marginal and that the signal may not have captured the blinks reliability.\r\n\r\n### <a name=\"signalData\">The signalData substructure of blinks</a>\r\nThe `signalData` is a structure array containing information about candidate signals for the dataset. The individual fields are:\r\n\r\n**`bestMedian`**  \r\nA positive value giving the median blink maximum amplitude of the best candidate blinks. These blinks must have\r\nleft and right R^2 values at greater than `correlationThresholdTop` (0.98 by default).\r\n\r\n**`bestRobustStd`**  \r\nA positive number giving the 1.486 times the median absolute deviation from the median (mad) of the best candidate blinks. These blinks must have left and right R^2 values at greater than `correlationThresholdTop` (0.98 by default).\r\n\r\n**`blinkAmpRatio`**  \r\nA positive value indicating the blink-amplitude ratio for this signal.\r\n\r\n**`blinkPositions`**  \r\nA 2 x n array with the frame numbers of the starts and ends of intervals defining the portion of the n potential blinks that exceeds the threshold. The blink maximum should be in this interval.\r\n\r\n**`cutoff`**  \r\nA positive value estimating the boundary between the blink maximum distributions of the \"good\" blink candidates and the other blink candidates. If this value is well away from the `bestMedian`, the dataset is likely to have  good separation between blinks and eye movements.\r\n\r\n**`goodRatio`**  \r\nA positive numeric value between 0 and 1 indicating the fraction of blinks whose maximum amplitude is within two robust standard deviations of the median of the best blinks that are \"good\" blinks. This is a measure of how badly eye movements confound the maximum amplitude distribution.\r\n\r\n**`numberBlinks`**  \r\nThe number of potential blinks detected in this signal.\r\n[A nonnegative integer.]\r\n\r\n**`numberGoodBlinks`**  \r\nAn integer giving the number of \"good\" potential blinks detected in this signal. These blinks must have\r\nleft and right R^2 values at greater than `correlationThresholdBottom` (0.90 by default).\r\n[A nonnegative integer.]\r\n\r\n**`signal`**  \r\nThe timeseries for this signal.\r\n\r\n**`signalLabel`**  \r\nA unique identifier of the signal within the dataset as a whole (for example the channel label). BLINKER automatically creates labels for independent components: 'IC1', 'IC2', etc.\r\n[A string.]\r\n\r\n**`signalNumber`**  \r\nA unique integer identifier of the signal within the dataset as a whole (for example the channel number of the IC number.)\r\n[A positive integer.]\r\n\r\n**`signalType`**  \r\n String indicating the type of signal this is. Usually the `signalType` will indicate how the initial candidate signals were specified and will have a value 'SignalNumbers', 'SignalLabels', `ICs'. \r\n\r\n\r\n## <a name=\"blinkFits\">The blinkFits structure</a>\r\nThe `blinkFits` structure array holds basic shape information for a set of potential blinks. In `extractBlinkProperties` function returns this structure for the potential blinks of the used signal that meet specific quality criteria. Values that are undefined, have value `NaN`. The fields are:\r\n\r\n**`number`**  \r\nThe number of the potential blink within the corresponding blinks structure.\r\n[A positive numeric value.]\r\n\r\n**`maxFrame`**  \r\nThe frame number of the first maximum amplitude of this blink.\r\n[A positive numeric value.]\r\n\r\n**`maxValue`**  \r\nA numeric value giving the maximum value of the blink.\r\n\r\n**`leftOuter`**  \r\nThe frame number of the left outer reach of the blink (defined as the largest of 1 or the frame of the previous blink maximum).  \r\n[A positive numeric value.]\r\n\r\n**`rightOuter`**  \r\nThe frame number of the right outer reach of the blink (defined as the smallest of the last frame or the frame of the next blink maximum).  \r\n[A positive numeric value.]\r\n\r\n**`leftZero`**  \r\nThe frame number of the left zero crossing of the blink.\r\n[A positive numeric value.]\r\n\r\n**`rightZero`**  \r\nThe frame number of the right zero crossing of the blink.\r\n[A positive numeric value.]\r\n\r\n**`leftBase`**  \r\nThe frame number of the left local minimum of the blink.\r\n[A positive numeric value.]\r\n\r\n**`rightBase`**  \r\nThe frame number of the right local minimum of the blink.\r\n[A positive numeric value.]\r\n\r\n**`leftBaseHalfHeight`**  \r\nThe coordinate of the signal halfway (in height) between the blink maximum and the left base value.\r\n[A positive numeric value.]\r\n\r\n**`rightBaseHalfHeight`**  \r\nThe coordinate of the signal halfway (in height) between the blink maximum and the right base value.  \r\n[A positive numeric value.]\r\n\r\n**`leftZeroHalfHeight`**  \r\nThe coordinate of the signal halfway (in height) between the blink maximum and the left zero value.  \r\n\r\n**`rightZeroHalfHeight`**  \r\n\r\n**`leftRange`**  \r\n\r\n**`rightRange`**  \r\n\r\n**`leftSlope`**  \r\nThe slope of the left tent line or NaN if the tent line doesn't exist.\r\n\r\n**`rightSlope`**  \r\nSlope of the right blink tent line or NaN if the tent line doesn't exist.\r\n\r\n**`averLeftVelocity`**  \r\n\r\n**`averRightVelocity`**  \r\n\r\n**`leftR2`**  \r\nThe correlation of the left tent line with the 80% blink upstroke. \r\n[A numeric value or NaN if the tent line doesn't exist.]\r\n\r\n**`rightR2`**  \r\nThe correlation of the right tent line with the 80% blink downstroke. \r\n[A numeric value or NaN if the tent line doesn't exist.]\r\n\r\n**`xIntersect`**  \r\nThe x-coordinate of the intersection of the left and right tent line with the x-axis.  \r\n[A numeric value or NaN if the tent line doesn't exist.]\r\n\r\n**`yIntersect`**  \r\nThe y-coordinate of the intersection of the left and right tent line with the x-axis.  \r\n[A numeric value or NaN if the tent line doesn't exist.]\r\n\r\n**`leftXIntercept`**  \r\nAn integer giving the frame number of the intersection of the left tent line with the x-axis (or NaN if the tent line doesn't exist).\r\n\r\n**`rightXIntercept`**   \r\nAn integer giving the frame number of the intersection of the right tent line with the x-axis (or NaN if the tent line doesn't exist).\r\n\r\n## <a name=\"blinkProperties\">The blinkProperties structure</a>\r\nThe `blinkProperties` structure array holds basic ocular characteristics for a set of potential blinks. The `extractBlinkProperties` function returns this structure for the potential blinks of the used signal that meet specific quality criteria. Values that are undefined, have value `NaN`. The fields are:\r\n\r\n**`durationBase`**  \r\nLength of the blink in seconds calculated as the difference between `rightBase` and `leftBase`.\r\n\r\n**`durationZero`**  \r\nLength of the blink in seconds calculated as the difference between `rightZero` and `leftZero`.  \r\n\r\n**`durationTent`**  \r\nLength of the blink in seconds calculated as the difference between `rightZero` and `leftZero`.  \r\n\r\n**`durationHalfBase`**  \r\nLength of the blink in seconds calculated as the difference between the frame marking the left half base amplitude and the first intersection of the horizontal line drawn from the blink value at that point to the down stroke of the blink.\r\n\r\n**`durationHalfZero`**  \r\nLength of the blink in seconds calculated as the difference between the frame marking the left half zero amplitude and the first intersection of the horizontal line drawn from the blink value at that point to the down stroke of the blink.\r\n\r\n**`interBlinkMaxAmp`**  \r\nLength of the interval in seconds between successive blink peaks.\r\n\r\n**`interBlinkMaxVelBase`**  \r\nLength of the interval in seconds between the maximum positive velocity (calculated from `leftBase`) of one blink and the next one. \r\n\r\n**`interBlinkMaxVelZero`**  \r\nLength of the interval in seconds between the maximum positive velocity (calculated from `leftZero`) of one blink and the next one. \r\n\r\n**`negAmpVelRatioBase`**  \r\n**`posAmpVelRatioBase`**  \r\n**`negAmpVelRatioZero`**  \r\n**`posAmpVelRatioZero`**  \r\n**`negAmpVelRatioTent`**  \r\n**`posAmpVelRatioTent`**  \r\n**`'timeShutBase`**  \r\n**`'timeShutZero`**  \r\n**`timeShutTent`**  \r\n**`closingTimeZero`**  \r\n**`reopeningTimeZero`**  \r\n**`closingTimeTent`**  \r\n**`reopeningTimeTent`**  \r\n**`peakTimeBlink`**  \r\n**`peakTimeTent`**  \r\n**`peakMaxBlink`**  \r\n**`penitential`**  \r\n\r\n## <a name=\"blinkStatistics\">The blinkStatistics structure</a>\r\nThe `blinkProperties` structure array holds basic ocular characteristics for a set of potential blinks. The `extractBlinkProperties` function returns this structure for the potential blinks of the used signal that meet specific quality criteria. Values that are undefined, have value `NaN`. header = {'mean', 'median', 'std', 'mad', 'goodMean', 'goodMedian', ...\r\n               'goodStd', 'goodMad'};The fields are:\r\n\r\n**`blinksPerMin`**  \r\nBlinks per minute for the dataset.\r\n\r\n**`durationB`**  \r\nLength\r\n**`durationHB`**  \r\n**`durationHZ`**  \r\n**`durationT`**  \r\n**`durationZ`**  \r\n**`fileName`**  \r\n**`goodRatio`**  \r\n**`header`**  \r\n**`numberBlinks`**  \r\n**`numberGoodBlinks`**  \r\n**`nAVRZ`**  \r\n**`pAVRZ`**  \r\n**`seconds`**  \r\n**`srate`**  \r\n**`startTime`**   \r\n**`status`**  \r\nString indicated the status of the blink calculation. A value of \"success\" means that blinks were successfully computed, although the results may be marginal. A value of \"failed\" means that the algorithm could not extract blinks from any of the candidate signals provide.\r\n \r\n**`subjectID`**  \r\nString identifying the subject from which the dataset was recorded. This field is used for display purposes and for combining datasets taken from a single subject in one session to improve estimates of blink maximum distribution.\r\n\r\n**`task`**  \r\nString identifying the task performed by the subject for this dataset.\r\n \r\n**`uniqueName`**   \r\nString uniquely identifying this data set.\r\n           \r\n**`usedLabel`**  \r\nThe `signalLabel` of the \"best\" signal.\r\n\r\n**`usedNumber`**  \r\nThe `signalNumber` of the \"best\" signal.\r\n\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}