%% Extract the blinks structure based on channel or EOG time series
% This script assumes that EEGLAB is in the path, that the datasets are
% in EEGLAB EEG structures. 
%
% To run for your own data you must have first generated a 
% blink file list which contains a list of files with the appropriate 
% subject and other metadata.  See examples in
% ./moreExamples/addingSubjectInfo.
% 
% The BLINKER pipeline produces a directory of blink files (one file per data
% file). Each file contains a blinks structure with the eligible signals
% and metadata information, a blinkFits structure with the fits for the
% used signal, a blinkProperties structure for the blinks of the used
% signal, a blinkStatistics structure with the statistics of the basic
% ocular indices, and the params structure used to run the program.
%
% See also pop_blinker 
%
% Written by Kay Robbins and Kelly Kleigfas, UTSA, 2016
%
%% Setup
pop_editoptions('option_single', false, 'option_savetwofiles', false);
params = struct();

%% Set up for the BCIT driving data
blinkDir = 'O:\ARL_Data\BCITBlinksNewRefactored';
typeBlinks = 'AllUnrefNewBoth';
experiment = 'BCITLevel0';
blinkFileList = [blinkDir filesep experiment 'FileList.mat'];
blinkIndDir = [blinkDir filesep experiment typeBlinks];

%% Shooter
% experiment = 'Shooter';
% blinkDir = 'O:\ARL_Data\Shooter\ShooterBlinksNewRefactored';
% typeBlinks = 'AllMastNewBoth';
% blinkFileList = [blinkDir filesep experiment 'FileList.mat'];
% blinkIndDir = [blinkDir filesep typeBlinks];

%% BCI2000
% experiment = 'BCI2000';
% blinkDir = 'O:\ARL_Data\BCI2000\BCI2000BlinksNewRefactored';
% typeBlinks = 'AllMastNewBoth';
% blinkFileList = [blinkDir filesep experiment 'FileList.mat'];
% blinkIndDir = [blinkDir filesep typeBlinks];

%% NCTU Lane Keeping
% experiment = 'NCTU_LK';
% blinkDir = 'O:\ARL_Data\NCTU\NCTUBlinksNewRefactored';
% typeBlinks = 'AllMastNewBoth';
% blinkFileList = [blinkDir filesep experiment 'FileList.mat'];
% blinkIndDir = [blinkDir filesep typeBlinks];

%%
%% Get the files from the base directory
inList = dir(blinkDirInd);
dirNames = {inList(:).name};
dirTypes = [inList(:).isdir];
fileNames = dirNames(~dirTypes);
numberActualFiles = length(fileNames);

%% Load the baseline blink file list
load(blinkFileList);

%% Set up the mapping
numberFiles = length(blinkFiles);
fileMap = containers.Map('KeyType', 'char', 'ValueType', 'any');
for k = 1:numberActualFiles
    fileMap(fileNames{k}) = k;
end

%% Shooter examples
% blinkDir = 'O:\ARL_Data\Shooter\ShooterBlinksNewRevised';
% experiment = 'Shooter';
% %typeBlinks = 'ChannelUnrefNewBothCombined';
% typeBlinks = 'EOGUnrefNewBothCombined';
% excludeTasks = {'EO', 'EC'};

%% Fill in an empty structure for efficiency
blinkStatistics(numberFiles) = getSummaryStatistics();
for k = 1:numberFiles - 1
    blinkStatistics(k) = getSummaryStatistics();
end

%% Now read in the individual files and process
mapGood = containers.Map('KeyType', 'char', 'ValueType', 'any');
mapMarginal = containers.Map('KeyType', 'char', 'ValueType', 'any');
fileMask = true(numberFiles, 1);
nanMask = false(numberFiles, 1);

for k = 1:numberFiles
    clear blinks blinkFits blinkProperties blinkStatistics params;
    thisFile = [blinkFiles(k).blinkFileName '_' typeBlinks '.mat'];
    if ~isKey(fileMap, thisFile)
        fileMask(k) = false;
        warning('---%s does not have a blink file\n', thisFile); 
        continue;
    end
    actualPos = fileMap(thisFile);
    fileName = [blinkDirInd filesep thisFile];
    fprintf('Loading %s...\n', thisFile);
    load (fileName);
    if ~exist('blinks', 'var')
        fileMask(k) = false;
        warning('---%s does not contain blink structures\n', fileName);
        continue;
    elseif sum(strcmpi(excludedTasks, blinks.task)) > 0
        fileMask(k) = false;
        warning('---%s has excluded task %s\n', fileName, blinks.task);
        continue;
    elseif isnan(blinks.usedSignal) || isempty(blinks.usedSignal)
        nanMask(k) = true;
        warning('---%s does not have blinks\n', fileName);
        continue;
    end
    blinkStatistics(k) = ...
                getBlinkStatistics(blinks, blinkFits, blinkProperties);
    
    if strcmpi(blinkStatistics(k).status, 'marginal')
        if isKey(mapMarginal, theLabel)
            theCount = mapMarginal(theLabel);
        else
            theCount = 0;
        end
        theCount = theCount + 1;
        mapMarginal(theLabel) = theCount;    
    elseif strcmpi(blinkStatistics(k).status, 'good')
        if isKey(mapGood, theLabel)
            theCount = mapGood(theLabel);
        else
            theCount = 0;
        end
        theCount = theCount + 1;
        mapGood(theLabel) = theCount;
        blinkStatistics(k).status = 'good';
    end
end

%% Load the file list
load(blinkFileList);

%% Run the blinker blink extraction to create a file.
numberFiles = length(blinkFiles);
for k = 1:numberFiles
    fprintf('%d: %s\n', k, blinkFiles(k).fileName);
    try
        blinkStatistics = extractBlinkStatistics(blinks, blinkFits, ...
                                              blinkProperties, params);
        EEG = pop_loadset(blinkFiles(k).fileName);
        params = checkBlinkerDefaults(struct(), getBlinkerDefaults(EEG));
        params.subjectID = blinkFiles(k).subjectID;
        params.experiment = blinkFiles(k).experiment;
        params.uniqueName = blinkFiles(k).uniqueName;
        params.task = blinkFiles(k).task;
        params.fileName = blinkFiles(k).fileName;
        params.startDate = blinkFiles(k).startDate;
        params.startTime = blinkFiles(k).startTime;
        params.blinkerSaveFile = [blinkIndDir filesep ...
            blinkFiles(k).blinkFileName '_' typeBlinks '.mat'];
        params.dumpBlinkerStructures = true;
        params.blinkerDumpDir = blinkIndDir;
        params.dumpBlinkImages = false;
        params.dumpBlinkPositions = false;
        params.keepSignals = false;      % Make true if combining downstream
        params.showMaxDistribution = false;
        params.verbose = false;
        %params.excludeLabels = {'a1', 'a2', 'vehicle position'}; 
       [EEG, com, blinks, blinkFits, blinkProperties, blinkStatistics, ...
           params] = pop_blinker(EEG, params); 
    catch Mex
        blinks.status = ['failure:' Mex.message];
    end
    
end